{"/home/travis/build/npmtest/node-npmtest-restangular/test.js":"/* istanbul instrument in package npmtest_restangular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restangular/lib.npmtest_restangular.js":"/* istanbul instrument in package npmtest_restangular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_restangular = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_restangular = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-restangular/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-restangular && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_restangular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_restangular\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_restangular.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_restangular.rollup.js'] =\n            local.assetsDict['/assets.npmtest_restangular.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_restangular.__dirname +\n                    '/lib.npmtest_restangular.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-restangular/node_modules/restangular/dist/restangular.js":"/**\n * Restful Resources service for AngularJS apps\n * @version v1.6.1 - 2017-01-06 * @link https://github.com/mgonto/restangular\n * @author Martin Gontovnikas <martin@gon.to>\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */(function(root, factory) {\n  /* global define, require */\n  // https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n  if (typeof define === 'function' && define.amd) {\n    define(['lodash', 'angular'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory(require('lodash'), require('angular'));\n  } else {\n    // No global export, Restangular will register itself as Angular.js module\n    factory(root._, root.angular);\n  }\n}(this, function(_, angular) {\n\n  var restangular = angular.module('restangular', []);\n\n  restangular.provider('Restangular', function() {\n    // Configuration\n    var Configurer = {};\n    Configurer.init = function(object, config) {\n      object.configuration = config;\n\n      /**\n       * Those are HTTP safe methods for which there is no need to pass any data with the request.\n       */\n      var safeMethods = ['get', 'head', 'options', 'trace', 'getlist'];\n      config.isSafe = function(operation) {\n        return _.includes(safeMethods, operation.toLowerCase());\n      };\n\n      var absolutePattern = /^https?:\\/\\//i;\n      config.isAbsoluteUrl = function(string) {\n        return _.isUndefined(config.absoluteUrl) || _.isNull(config.absoluteUrl) ?\n          string && absolutePattern.test(string) :\n          config.absoluteUrl;\n      };\n\n      config.absoluteUrl = _.isUndefined(config.absoluteUrl) ? true : config.absoluteUrl;\n      object.setSelfLinkAbsoluteUrl = function(value) {\n        config.absoluteUrl = value;\n      };\n      /**\n       * This is the BaseURL to be used with Restangular\n       */\n      config.baseUrl = _.isUndefined(config.baseUrl) ? '' : config.baseUrl;\n      object.setBaseUrl = function(newBaseUrl) {\n        config.baseUrl = /\\/$/.test(newBaseUrl) ?\n          newBaseUrl.substring(0, newBaseUrl.length - 1) :\n          newBaseUrl;\n        return this;\n      };\n\n      /**\n       * Sets the extra fields to keep from the parents\n       */\n      config.extraFields = config.extraFields || [];\n      object.setExtraFields = function(newExtraFields) {\n        config.extraFields = newExtraFields;\n        return this;\n      };\n\n      /**\n       * Some default $http parameter to be used in EVERY call\n       **/\n      config.defaultHttpFields = config.defaultHttpFields || {};\n      object.setDefaultHttpFields = function(values) {\n        config.defaultHttpFields = values;\n        return this;\n      };\n\n      /**\n       * Always return plain data, no restangularized object\n       **/\n      config.plainByDefault = config.plainByDefault || false;\n      object.setPlainByDefault = function(value) {\n        config.plainByDefault = value === true ? true : false;\n        return this;\n      };\n\n      config.withHttpValues = function(httpLocalConfig, obj) {\n        return _.defaults(obj, httpLocalConfig, config.defaultHttpFields);\n      };\n\n      config.encodeIds = _.isUndefined(config.encodeIds) ? true : config.encodeIds;\n      object.setEncodeIds = function(encode) {\n        config.encodeIds = encode;\n      };\n\n      config.defaultRequestParams = config.defaultRequestParams || {\n        get: {},\n        post: {},\n        put: {},\n        remove: {},\n        common: {}\n      };\n\n      object.setDefaultRequestParams = function(param1, param2) {\n        var methods = [],\n          params = param2 || param1;\n        if (!_.isUndefined(param2)) {\n          if (_.isArray(param1)) {\n            methods = param1;\n          } else {\n            methods.push(param1);\n          }\n        } else {\n          methods.push('common');\n        }\n\n        _.each(methods, function(method) {\n          config.defaultRequestParams[method] = params;\n        });\n        return this;\n      };\n\n      object.requestParams = config.defaultRequestParams;\n\n      config.defaultHeaders = config.defaultHeaders || {};\n      object.setDefaultHeaders = function(headers) {\n        config.defaultHeaders = headers;\n        object.defaultHeaders = config.defaultHeaders;\n        return this;\n      };\n\n      object.defaultHeaders = config.defaultHeaders;\n\n      /**\n       * Method overriders will set which methods are sent via POST with an X-HTTP-Method-Override\n       **/\n      config.methodOverriders = config.methodOverriders || [];\n      object.setMethodOverriders = function(values) {\n        var overriders = _.extend([], values);\n        if (config.isOverridenMethod('delete', overriders)) {\n          overriders.push('remove');\n        }\n        config.methodOverriders = overriders;\n        return this;\n      };\n\n      config.jsonp = _.isUndefined(config.jsonp) ? false : config.jsonp;\n      object.setJsonp = function(active) {\n        config.jsonp = active;\n      };\n\n      config.isOverridenMethod = function(method, values) {\n        var search = values || config.methodOverriders;\n        return !_.isUndefined(_.find(search, function(one) {\n          return one.toLowerCase() === method.toLowerCase();\n        }));\n      };\n\n      /**\n       * Sets the URL creator type. For now, only Path is created. In the future we'll have queryParams\n       **/\n      config.urlCreator = config.urlCreator || 'path';\n      object.setUrlCreator = function(name) {\n        if (!_.has(config.urlCreatorFactory, name)) {\n          throw new Error('URL Path selected isn\\'t valid');\n        }\n\n        config.urlCreator = name;\n        return this;\n      };\n\n      /**\n       * You can set the restangular fields here. The 3 required fields for Restangular are:\n       *\n       * id: Id of the element\n       * route: name of the route of this element\n       * parentResource: the reference to the parent resource\n       *\n       *  All of this fields except for id, are handled (and created) by Restangular. By default,\n       *  the field values will be id, route and parentResource respectively\n       */\n      config.restangularFields = config.restangularFields || {\n        id: 'id',\n        route: 'route',\n        parentResource: 'parentResource',\n        restangularCollection: 'restangularCollection',\n        cannonicalId: '__cannonicalId',\n        etag: 'restangularEtag',\n        selfLink: 'href',\n        get: 'get',\n        getList: 'getList',\n        put: 'put',\n        post: 'post',\n        remove: 'remove',\n        head: 'head',\n        trace: 'trace',\n        options: 'options',\n        patch: 'patch',\n        getRestangularUrl: 'getRestangularUrl',\n        getRequestedUrl: 'getRequestedUrl',\n        putElement: 'putElement',\n        addRestangularMethod: 'addRestangularMethod',\n        getParentList: 'getParentList',\n        clone: 'clone',\n        ids: 'ids',\n        httpConfig: '_$httpConfig',\n        reqParams: 'reqParams',\n        one: 'one',\n        all: 'all',\n        several: 'several',\n        oneUrl: 'oneUrl',\n        allUrl: 'allUrl',\n        customPUT: 'customPUT',\n        customPATCH: 'customPATCH',\n        customPOST: 'customPOST',\n        customDELETE: 'customDELETE',\n        customGET: 'customGET',\n        customGETLIST: 'customGETLIST',\n        customOperation: 'customOperation',\n        doPUT: 'doPUT',\n        doPATCH: 'doPATCH',\n        doPOST: 'doPOST',\n        doDELETE: 'doDELETE',\n        doGET: 'doGET',\n        doGETLIST: 'doGETLIST',\n        fromServer: 'fromServer',\n        withConfig: 'withConfig',\n        withHttpConfig: 'withHttpConfig',\n        singleOne: 'singleOne',\n        plain: 'plain',\n        save: 'save',\n        restangularized: 'restangularized'\n      };\n      object.setRestangularFields = function(resFields) {\n        config.restangularFields =\n          _.extend(config.restangularFields, resFields);\n        return this;\n      };\n\n      config.isRestangularized = function(obj) {\n        return !!obj[config.restangularFields.restangularized];\n      };\n\n      config.setFieldToElem = function(field, elem, value) {\n        var properties = field.split('.');\n        var idValue = elem;\n        _.each(_.initial(properties), function(prop) {\n          idValue[prop] = {};\n          idValue = idValue[prop];\n        });\n        idValue[_.last(properties)] = value;\n        return this;\n      };\n\n      config.getFieldFromElem = function(field, elem) {\n        var properties = field.split('.');\n        var idValue = elem;\n        _.each(properties, function(prop) {\n          if (idValue) {\n            idValue = idValue[prop];\n          }\n        });\n        return angular.copy(idValue);\n      };\n\n      config.setIdToElem = function(elem, id /*, route */ ) {\n        config.setFieldToElem(config.restangularFields.id, elem, id);\n        return this;\n      };\n\n      config.getIdFromElem = function(elem) {\n        return config.getFieldFromElem(config.restangularFields.id, elem);\n      };\n\n      config.isValidId = function(elemId) {\n        return '' !== elemId && !_.isUndefined(elemId) && !_.isNull(elemId);\n      };\n\n      config.setUrlToElem = function(elem, url /*, route */ ) {\n        config.setFieldToElem(config.restangularFields.selfLink, elem, url);\n        return this;\n      };\n\n      config.getUrlFromElem = function(elem) {\n        return config.getFieldFromElem(config.restangularFields.selfLink, elem);\n      };\n\n      config.useCannonicalId = _.isUndefined(config.useCannonicalId) ? false : config.useCannonicalId;\n      object.setUseCannonicalId = function(value) {\n        config.useCannonicalId = value;\n        return this;\n      };\n\n      config.getCannonicalIdFromElem = function(elem) {\n        var cannonicalId = elem[config.restangularFields.cannonicalId];\n        var actualId = config.isValidId(cannonicalId) ? cannonicalId : config.getIdFromElem(elem);\n        return actualId;\n      };\n\n      /**\n       * Sets the Response parser. This is used in case your response isn't directly the data.\n       * For example if you have a response like {meta: {'meta'}, data: {name: 'Gonto'}}\n       * you can extract this data which is the one that needs wrapping\n       *\n       * The ResponseExtractor is a function that receives the response and the method executed.\n       */\n\n      config.responseInterceptors = config.responseInterceptors || [];\n\n      config.defaultResponseInterceptor = function(data /*, operation, what, url, response, deferred */ ) {\n        return data;\n      };\n\n      config.responseExtractor = function(data, operation, what, url, response, deferred) {\n        var interceptors = angular.copy(config.responseInterceptors);\n        interceptors.push(config.defaultResponseInterceptor);\n        var theData = data;\n        _.each(interceptors, function(interceptor) {\n          theData = interceptor(theData, operation,\n            what, url, response, deferred);\n        });\n        return theData;\n      };\n\n      object.addResponseInterceptor = function(extractor) {\n        config.responseInterceptors.push(extractor);\n        return this;\n      };\n\n      config.errorInterceptors = config.errorInterceptors || [];\n      object.addErrorInterceptor = function(interceptor) {\n        config.errorInterceptors.push(interceptor);\n        return this;\n      };\n\n      object.setResponseInterceptor = object.addResponseInterceptor;\n      object.setResponseExtractor = object.addResponseInterceptor;\n      object.setErrorInterceptor = object.addErrorInterceptor;\n\n      /**\n       * Response interceptor is called just before resolving promises.\n       */\n\n\n      /**\n       * Request interceptor is called before sending an object to the server.\n       */\n      config.requestInterceptors = config.requestInterceptors || [];\n\n      config.defaultInterceptor = function(element, operation, path, url, headers, params, httpConfig) {\n        return {\n          element: element,\n          headers: headers,\n          params: params,\n          httpConfig: httpConfig\n        };\n      };\n\n      config.fullRequestInterceptor = function(element, operation, path, url, headers, params, httpConfig) {\n        var interceptors = angular.copy(config.requestInterceptors);\n        var defaultRequest = config.defaultInterceptor(element, operation, path, url, headers, params, httpConfig);\n        return _.reduce(interceptors, function(request, interceptor) {\n          return _.extend(request, interceptor(request.element, operation,\n            path, url, request.headers, request.params, request.httpConfig));\n        }, defaultRequest);\n      };\n\n      object.addRequestInterceptor = function(interceptor) {\n        config.requestInterceptors.push(function(elem, operation, path, url, headers, params, httpConfig) {\n          return {\n            headers: headers,\n            params: params,\n            element: interceptor(elem, operation, path, url),\n            httpConfig: httpConfig\n          };\n        });\n        return this;\n      };\n\n      object.setRequestInterceptor = object.addRequestInterceptor;\n\n      object.addFullRequestInterceptor = function(interceptor) {\n        config.requestInterceptors.push(interceptor);\n        return this;\n      };\n\n      object.setFullRequestInterceptor = object.addFullRequestInterceptor;\n\n      config.onBeforeElemRestangularized = config.onBeforeElemRestangularized || function(elem) {\n        return elem;\n      };\n      object.setOnBeforeElemRestangularized = function(post) {\n        config.onBeforeElemRestangularized = post;\n        return this;\n      };\n\n      object.setRestangularizePromiseInterceptor = function(interceptor) {\n        config.restangularizePromiseInterceptor = interceptor;\n        return this;\n      };\n\n      /**\n       * This method is called after an element has been \"Restangularized\".\n       *\n       * It receives the element, a boolean indicating if it's an element or a collection\n       * and the name of the model\n       *\n       */\n      config.onElemRestangularized = config.onElemRestangularized || function(elem) {\n        return elem;\n      };\n      object.setOnElemRestangularized = function(post) {\n        config.onElemRestangularized = post;\n        return this;\n      };\n\n      config.shouldSaveParent = config.shouldSaveParent || function() {\n        return true;\n      };\n      object.setParentless = function(values) {\n        if (_.isArray(values)) {\n          config.shouldSaveParent = function(route) {\n            return !_.includes(values, route);\n          };\n        } else if (_.isBoolean(values)) {\n          config.shouldSaveParent = function() {\n            return !values;\n          };\n        }\n        return this;\n      };\n\n      /**\n       * This lets you set a suffix to every request.\n       *\n       * For example, if your api requires that for JSon requests you do /users/123.json, you can set that\n       * in here.\n       *\n       *\n       * By default, the suffix is null\n       */\n      config.suffix = _.isUndefined(config.suffix) ? null : config.suffix;\n      object.setRequestSuffix = function(newSuffix) {\n        config.suffix = newSuffix;\n        return this;\n      };\n\n      /**\n       * Add element transformers for certain routes.\n       */\n      config.transformers = config.transformers || {};\n      config.matchTransformers = config.matchTransformers || [];\n      object.addElementTransformer = function(type, secondArg, thirdArg) {\n        var isCollection = null;\n        var transformer = null;\n        if (arguments.length === 2) {\n          transformer = secondArg;\n        } else {\n          transformer = thirdArg;\n          isCollection = secondArg;\n        }\n\n        var transformerFn = function(coll, elem) {\n          if (_.isNull(isCollection) || (coll === isCollection)) {\n            return transformer(elem);\n          }\n          return elem;\n        };\n\n        if (_.isRegExp(type)) {\n          config.matchTransformers.push({\n            regexp: type,\n            transformer: transformerFn\n          });\n        } else {\n          if (!config.transformers[type]) {\n            config.transformers[type] = [];\n          }\n          config.transformers[type].push(transformerFn);\n        }\n\n        return object;\n      };\n\n      object.extendCollection = function(route, fn) {\n        return object.addElementTransformer(route, true, fn);\n      };\n\n      object.extendModel = function(route, fn) {\n        return object.addElementTransformer(route, false, fn);\n      };\n\n      config.transformElem = function(elem, isCollection, route, Restangular, force) {\n        if (!force && !config.transformLocalElements && !elem[config.restangularFields.fromServer]) {\n          return elem;\n        }\n\n        var changedElem = elem;\n\n        var matchTransformers = config.matchTransformers;\n        if (matchTransformers) {\n          _.each(matchTransformers, function(transformer) {\n            if (transformer.regexp.test(route)) {\n              changedElem = transformer.transformer(isCollection, changedElem);\n            }\n          });\n        }\n\n        var typeTransformers = config.transformers[route];\n        if (typeTransformers) {\n          _.each(typeTransformers, function(transformer) {\n            changedElem = transformer(isCollection, changedElem);\n          });\n        }\n        return config.onElemRestangularized(changedElem, isCollection, route, Restangular);\n      };\n\n      config.transformLocalElements = _.isUndefined(config.transformLocalElements) ?\n        false :\n        config.transformLocalElements;\n\n      object.setTransformOnlyServerElements = function(active) {\n        config.transformLocalElements = !active;\n      };\n\n      config.fullResponse = _.isUndefined(config.fullResponse) ? false : config.fullResponse;\n      object.setFullResponse = function(full) {\n        config.fullResponse = full;\n        return this;\n      };\n\n\n      //Internal values and functions\n      config.urlCreatorFactory = {};\n\n      /**\n       * Base URL Creator. Base prototype for everything related to it\n       **/\n\n      var BaseCreator = function() {};\n\n      BaseCreator.prototype.setConfig = function(config) {\n        this.config = config;\n        return this;\n      };\n\n      BaseCreator.prototype.parentsArray = function(current) {\n        var parents = [];\n        while (current) {\n          parents.push(current);\n          current = current[this.config.restangularFields.parentResource];\n        }\n        return parents.reverse();\n      };\n\n      function RestangularResource(config, $http, url, configurer) {\n        var resource = {};\n        _.each(_.keys(configurer), function(key) {\n          var value = configurer[key];\n\n          // Add default parameters\n          value.params = _.extend({}, value.params, config.defaultRequestParams[value.method.toLowerCase()]);\n          // We don't want the ? if no params are there\n          if (_.isEmpty(value.params)) {\n            delete value.params;\n          }\n\n          if (config.isSafe(value.method)) {\n\n            resource[key] = function() {\n              return $http(_.extend(value, {\n                url: url\n              }));\n            };\n\n          } else {\n\n            resource[key] = function(data) {\n              return $http(_.extend(value, {\n                url: url,\n                data: data\n              }));\n            };\n\n          }\n        });\n\n        return resource;\n      }\n\n      BaseCreator.prototype.resource = function(current, $http, localHttpConfig, callHeaders, callParams, what, etag, operation) {\n\n        var params = _.defaults(callParams || {}, this.config.defaultRequestParams.common);\n        var headers = _.defaults(callHeaders || {}, this.config.defaultHeaders);\n\n        if (etag) {\n          if (!config.isSafe(operation)) {\n            headers['If-Match'] = etag;\n          } else {\n            headers['If-None-Match'] = etag;\n          }\n        }\n\n        var url = this.base(current);\n\n        if (what || what === 0) {\n          var add = '';\n          if (!/\\/$/.test(url)) {\n            add += '/';\n          }\n          add += what;\n          url += add;\n        }\n\n        if (this.config.suffix &&\n          url.indexOf(this.config.suffix, url.length - this.config.suffix.length) === -1 &&\n          !this.config.getUrlFromElem(current)) {\n          url += this.config.suffix;\n        }\n\n        current[this.config.restangularFields.httpConfig] = undefined;\n\n        return RestangularResource(this.config, $http, url, {\n          getList: this.config.withHttpValues(localHttpConfig, {\n            method: 'GET',\n            params: params,\n            headers: headers\n          }),\n\n          get: this.config.withHttpValues(localHttpConfig, {\n            method: 'GET',\n            params: params,\n            headers: headers\n          }),\n\n          jsonp: this.config.withHttpValues(localHttpConfig, {\n            method: 'jsonp',\n            params: params,\n            headers: headers\n          }),\n\n          put: this.config.withHttpValues(localHttpConfig, {\n            method: 'PUT',\n            params: params,\n            headers: headers\n          }),\n\n          post: this.config.withHttpValues(localHttpConfig, {\n            method: 'POST',\n            params: params,\n            headers: headers\n          }),\n\n          remove: this.config.withHttpValues(localHttpConfig, {\n            method: 'DELETE',\n            params: params,\n            headers: headers\n          }),\n\n          head: this.config.withHttpValues(localHttpConfig, {\n            method: 'HEAD',\n            params: params,\n            headers: headers\n          }),\n\n          trace: this.config.withHttpValues(localHttpConfig, {\n            method: 'TRACE',\n            params: params,\n            headers: headers\n          }),\n\n          options: this.config.withHttpValues(localHttpConfig, {\n            method: 'OPTIONS',\n            params: params,\n            headers: headers\n          }),\n\n          patch: this.config.withHttpValues(localHttpConfig, {\n            method: 'PATCH',\n            params: params,\n            headers: headers\n          })\n        });\n      };\n\n      /**\n       * This is the Path URL creator. It uses Path to show Hierarchy in the Rest API.\n       * This means that if you have an Account that then has a set of Buildings, a URL to a building\n       * would be /accounts/123/buildings/456\n       **/\n      var Path = function() {};\n\n      Path.prototype = new BaseCreator();\n\n      Path.prototype.normalizeUrl = function(url) {\n        var parts = /((?:http[s]?:)?\\/\\/)?(.*)?/.exec(url);\n        parts[2] = parts[2].replace(/[\\\\\\/]+/g, '/');\n        return (typeof parts[1] !== 'undefined') ? parts[1] + parts[2] : parts[2];\n      };\n\n      Path.prototype.base = function(current) {\n        var __this = this;\n        return _.reduce(this.parentsArray(current), function(acum, elem) {\n          var elemUrl;\n          var elemSelfLink = __this.config.getUrlFromElem(elem);\n          if (elemSelfLink) {\n            if (__this.config.isAbsoluteUrl(elemSelfLink)) {\n              return elemSelfLink;\n            } else {\n              elemUrl = elemSelfLink;\n            }\n          } else {\n            elemUrl = elem[__this.config.restangularFields.route];\n\n            if (elem[__this.config.restangularFields.restangularCollection]) {\n              var ids = elem[__this.config.restangularFields.ids];\n              if (ids) {\n                elemUrl += '/' + ids.join(',');\n              }\n            } else {\n              var elemId;\n              if (__this.config.useCannonicalId) {\n                elemId = __this.config.getCannonicalIdFromElem(elem);\n              } else {\n                elemId = __this.config.getIdFromElem(elem);\n              }\n\n              if (config.isValidId(elemId) && !elem.singleOne) {\n                elemUrl += '/' + (__this.config.encodeIds ? encodeURIComponent(elemId) : elemId);\n              }\n            }\n          }\n          acum = acum.replace(/\\/$/, '') + '/' + elemUrl;\n          return __this.normalizeUrl(acum);\n\n        }, this.config.baseUrl);\n      };\n\n\n\n      Path.prototype.fetchUrl = function(current, what) {\n        var baseUrl = this.base(current);\n        if (what) {\n          baseUrl += '/' + what;\n        }\n        return baseUrl;\n      };\n\n      Path.prototype.fetchRequestedUrl = function(current, what) {\n        var url = this.fetchUrl(current, what);\n        var params = current[config.restangularFields.reqParams];\n\n        // From here on and until the end of fetchRequestedUrl,\n        // the code has been kindly borrowed from angular.js\n        // The reason for such code bloating is coherence:\n        //   If the user were to use this for cache management, the\n        //   serialization of parameters would need to be identical\n        //   to the one done by angular for cache keys to match.\n        function sortedKeys(obj) {\n          var keys = [];\n          for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n              keys.push(key);\n            }\n          }\n          return keys.sort();\n        }\n\n        function forEachSorted(obj, iterator, context) {\n          var keys = sortedKeys(obj);\n          for (var i = 0; i < keys.length; i++) {\n            iterator.call(context, obj[keys[i]], keys[i]);\n          }\n          return keys;\n        }\n\n        function encodeUriQuery(val, pctEncodeSpaces) {\n          return encodeURIComponent(val).\n          replace(/%40/gi, '@').\n          replace(/%3A/gi, ':').\n          replace(/%24/g, '$').\n          replace(/%2C/gi, ',').\n          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n        }\n\n        if (!params) {\n          return url + (this.config.suffix || '');\n        }\n\n        var parts = [];\n        forEachSorted(params, function(value, key) {\n          if (value === null || value === undefined) {\n            return;\n          }\n          if (!angular.isArray(value)) {\n            value = [value];\n          }\n\n          angular.forEach(value, function(v) {\n            if (angular.isObject(v)) {\n              v = angular.toJson(v);\n            }\n            parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));\n          });\n        });\n\n        return url + (this.config.suffix || '') + ((url.indexOf('?') === -1) ? '?' : '&') + parts.join('&');\n      };\n\n      config.urlCreatorFactory.path = Path;\n    };\n\n    var globalConfiguration = {};\n\n    Configurer.init(this, globalConfiguration);\n\n\n\n    this.$get = ['$http', '$q', function($http, $q) {\n\n      function createServiceForConfiguration(config) {\n        var service = {};\n\n        var urlHandler = new config.urlCreatorFactory[config.urlCreator]();\n        urlHandler.setConfig(config);\n\n        function restangularizeBase(parent, elem, route, reqParams, fromServer) {\n          elem[config.restangularFields.route] = route;\n          elem[config.restangularFields.getRestangularUrl] = _.bind(urlHandler.fetchUrl, urlHandler, elem);\n          elem[config.restangularFields.getRequestedUrl] = _.bind(urlHandler.fetchRequestedUrl, urlHandler, elem);\n          elem[config.restangularFields.addRestangularMethod] = _.bind(addRestangularMethodFunction, elem);\n          elem[config.restangularFields.clone] = _.bind(copyRestangularizedElement, elem, elem);\n          elem[config.restangularFields.reqParams] = _.isEmpty(reqParams) ? null : reqParams;\n          elem[config.restangularFields.withHttpConfig] = _.bind(withHttpConfig, elem);\n          elem[config.restangularFields.plain] = _.bind(stripRestangular, elem, elem);\n\n          // Tag element as restangularized\n          elem[config.restangularFields.restangularized] = true;\n\n          // RequestLess connection\n          elem[config.restangularFields.one] = _.bind(one, elem, elem);\n          elem[config.restangularFields.all] = _.bind(all, elem, elem);\n          elem[config.restangularFields.several] = _.bind(several, elem, elem);\n          elem[config.restangularFields.oneUrl] = _.bind(oneUrl, elem, elem);\n          elem[config.restangularFields.allUrl] = _.bind(allUrl, elem, elem);\n\n          elem[config.restangularFields.fromServer] = !!fromServer;\n\n          if (parent && config.shouldSaveParent(route)) {\n            var parentId = config.getIdFromElem(parent);\n            var parentUrl = config.getUrlFromElem(parent);\n\n            var restangularFieldsForParent = _.union(\n              _.values(_.pick(config.restangularFields, ['route', 'singleOne', 'parentResource'])),\n              config.extraFields\n            );\n            var parentResource = _.pick(parent, restangularFieldsForParent);\n\n            if (config.isValidId(parentId)) {\n              config.setIdToElem(parentResource, parentId, route);\n            }\n            if (config.isValidId(parentUrl)) {\n              config.setUrlToElem(parentResource, parentUrl, route);\n            }\n\n            elem[config.restangularFields.parentResource] = parentResource;\n          } else {\n            elem[config.restangularFields.parentResource] = null;\n          }\n          return elem;\n        }\n\n        function one(parent, route, id, singleOne) {\n          var error;\n          if (_.isNumber(route) || _.isNumber(parent)) {\n            error = 'You\\'re creating a Restangular entity with the number ';\n            error += 'instead of the route or the parent. For example, you can\\'t call .one(12).';\n            throw new Error(error);\n          }\n          if (_.isUndefined(route)) {\n            error = 'You\\'re creating a Restangular entity either without the path. ';\n            error += 'For example you can\\'t call .one(). Please check if your arguments are valid.';\n            throw new Error(error);\n          }\n          var elem = {};\n          config.setIdToElem(elem, id, route);\n          config.setFieldToElem(config.restangularFields.singleOne, elem, singleOne);\n          return restangularizeElem(parent, elem, route, false);\n        }\n\n\n        function all(parent, route) {\n          return restangularizeCollection(parent, [], route, false);\n        }\n\n        function several(parent, route /*, ids */ ) {\n          var collection = [];\n          collection[config.restangularFields.ids] = Array.prototype.splice.call(arguments, 2);\n          return restangularizeCollection(parent, collection, route, false);\n        }\n\n        function oneUrl(parent, route, url) {\n          if (!route) {\n            throw new Error('Route is mandatory when creating new Restangular objects.');\n          }\n          var elem = {};\n          config.setUrlToElem(elem, url, route);\n          return restangularizeElem(parent, elem, route, false);\n        }\n\n\n        function allUrl(parent, route, url) {\n          if (!route) {\n            throw new Error('Route is mandatory when creating new Restangular objects.');\n          }\n          var elem = {};\n          config.setUrlToElem(elem, url, route);\n          return restangularizeCollection(parent, elem, route, false);\n        }\n        // Promises\n        function restangularizePromise(promise, isCollection, valueToFill) {\n          promise.call = _.bind(promiseCall, promise);\n          promise.get = _.bind(promiseGet, promise);\n          promise[config.restangularFields.restangularCollection] = isCollection;\n          if (isCollection) {\n            promise.push = _.bind(promiseCall, promise, 'push');\n          }\n          promise.$object = valueToFill;\n          if (config.restangularizePromiseInterceptor) {\n            config.restangularizePromiseInterceptor(promise);\n          }\n          return promise;\n        }\n\n        function promiseCall(method) {\n          var deferred = $q.defer();\n          var callArgs = arguments;\n          var filledValue = {};\n          this.then(function(val) {\n            var params = Array.prototype.slice.call(callArgs, 1);\n            var func = val[method];\n            func.apply(val, params);\n            filledValue = val;\n            deferred.resolve(val);\n          });\n          return restangularizePromise(deferred.promise, this[config.restangularFields.restangularCollection], filledValue);\n        }\n\n        function promiseGet(what) {\n          var deferred = $q.defer();\n          var filledValue = {};\n          this.then(function(val) {\n            filledValue = val[what];\n            deferred.resolve(filledValue);\n          });\n          return restangularizePromise(deferred.promise, this[config.restangularFields.restangularCollection], filledValue);\n        }\n\n        function resolvePromise(deferred, response, data, filledValue) {\n          _.extend(filledValue, data);\n\n          // Trigger the full response interceptor.\n          if (config.fullResponse) {\n            return deferred.resolve(_.extend(response, {\n              data: data\n            }));\n          } else {\n            deferred.resolve(data);\n          }\n        }\n\n\n        // Elements\n        function stripRestangular(elem) {\n          if (_.isArray(elem)) {\n            var array = [];\n            _.each(elem, function(value) {\n              array.push(config.isRestangularized(value) ? stripRestangular(value) : value);\n            });\n            return array;\n          } else {\n            return _.omit(elem, _.values(_.omit(config.restangularFields, 'id')));\n          }\n        }\n\n        function addCustomOperation(elem) {\n          elem[config.restangularFields.customOperation] = _.bind(customFunction, elem);\n          var requestMethods = {\n            get: customFunction,\n            delete: customFunction\n          };\n          _.each(['put', 'patch', 'post'], function(name) {\n            requestMethods[name] = function(operation, elem, path, params, headers) {\n              return _.bind(customFunction, this)(operation, path, params, headers, elem);\n            };\n          });\n          _.each(requestMethods, function(requestFunc, name) {\n            var callOperation = name === 'delete' ? 'remove' : name;\n            _.each(['do', 'custom'], function(alias) {\n              elem[alias + name.toUpperCase()] = _.bind(requestFunc, elem, callOperation);\n            });\n          });\n          elem[config.restangularFields.customGETLIST] = _.bind(fetchFunction, elem);\n          elem[config.restangularFields.doGETLIST] = elem[config.restangularFields.customGETLIST];\n        }\n\n        function copyRestangularizedElement(element) {\n          var copiedElement = angular.copy(element);\n\n          // check if we're dealing with a collection (i.e. an array)\n          // and restangularize the element using the proper restangularizer,\n          // element / collection\n          if (_.isArray(element)) {\n            return restangularizeCollection(\n              element[config.restangularFields.parentResource],\n              copiedElement,\n              element[config.restangularFields.route],\n              element[config.restangularFields.fromServer],\n              element[config.restangularFields.reqParams]\n            );\n          }\n\n          // not a collection, restangularize it as an element\n          return restangularizeElem(\n            element[config.restangularFields.parentResource],\n            copiedElement,\n            element[config.restangularFields.route],\n            element[config.restangularFields.fromServer],\n            element[config.restangularFields.restangularCollection],\n            element[config.restangularFields.reqParams]\n          );\n        }\n\n        function restangularizeElem(parent, element, route, fromServer, collection, reqParams) {\n          var elem = config.onBeforeElemRestangularized(element, false, route);\n\n          var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n\n          if (config.useCannonicalId) {\n            localElem[config.restangularFields.cannonicalId] = config.getIdFromElem(localElem);\n          }\n\n          if (collection) {\n            localElem[config.restangularFields.getParentList] = function() {\n              return collection;\n            };\n          }\n\n          localElem[config.restangularFields.restangularCollection] = false;\n          localElem[config.restangularFields.get] = _.bind(getFunction, localElem);\n          localElem[config.restangularFields.getList] = _.bind(fetchFunction, localElem);\n          localElem[config.restangularFields.put] = _.bind(putFunction, localElem);\n          localElem[config.restangularFields.post] = _.bind(postFunction, localElem);\n          localElem[config.restangularFields.remove] = _.bind(deleteFunction, localElem);\n          localElem[config.restangularFields.head] = _.bind(headFunction, localElem);\n          localElem[config.restangularFields.trace] = _.bind(traceFunction, localElem);\n          localElem[config.restangularFields.options] = _.bind(optionsFunction, localElem);\n          localElem[config.restangularFields.patch] = _.bind(patchFunction, localElem);\n          localElem[config.restangularFields.save] = _.bind(save, localElem);\n\n          addCustomOperation(localElem);\n          return config.transformElem(localElem, false, route, service, true);\n        }\n\n        function restangularizeCollection(parent, element, route, fromServer, reqParams) {\n          var elem = config.onBeforeElemRestangularized(element, true, route);\n\n          var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n          localElem[config.restangularFields.restangularCollection] = true;\n          localElem[config.restangularFields.post] = _.bind(postFunction, localElem, null);\n          localElem[config.restangularFields.remove] = _.bind(deleteFunction, localElem);\n          localElem[config.restangularFields.head] = _.bind(headFunction, localElem);\n          localElem[config.restangularFields.trace] = _.bind(traceFunction, localElem);\n          localElem[config.restangularFields.putElement] = _.bind(putElementFunction, localElem);\n          localElem[config.restangularFields.options] = _.bind(optionsFunction, localElem);\n          localElem[config.restangularFields.patch] = _.bind(patchFunction, localElem);\n          localElem[config.restangularFields.get] = _.bind(getById, localElem);\n          localElem[config.restangularFields.getList] = _.bind(fetchFunction, localElem, null);\n\n          addCustomOperation(localElem);\n          return config.transformElem(localElem, true, route, service, true);\n        }\n\n        function restangularizeCollectionAndElements(parent, element, route, fromServer) {\n          var collection = restangularizeCollection(parent, element, route, fromServer);\n          _.each(collection, function(elem) {\n            if (elem) {\n              restangularizeElem(parent, elem, route, fromServer);\n            }\n          });\n          return collection;\n        }\n\n        function getById(id, reqParams, headers) {\n          return this.customGET(id.toString(), reqParams, headers);\n        }\n\n        function putElementFunction(idx, params, headers) {\n          var __this = this;\n          var elemToPut = this[idx];\n          var deferred = $q.defer();\n          var filledArray = [];\n          filledArray = config.transformElem(filledArray, true, elemToPut[config.restangularFields.route], service);\n          elemToPut.put(params, headers).then(function(serverElem) {\n            var newArray = copyRestangularizedElement(__this);\n            newArray[idx] = serverElem;\n            filledArray = newArray;\n            deferred.resolve(newArray);\n          }, function(response) {\n            deferred.reject(response);\n          });\n\n          return restangularizePromise(deferred.promise, true, filledArray);\n        }\n\n        function parseResponse(resData, operation, route, fetchUrl, response, deferred) {\n          var data = config.responseExtractor(resData, operation, route, fetchUrl, response, deferred);\n          var etag = response.headers('ETag');\n          if (data && etag) {\n            data[config.restangularFields.etag] = etag;\n          }\n          return data;\n        }\n\n\n        function fetchFunction(what, reqParams, headers) {\n          var __this = this;\n          var deferred = $q.defer();\n          var operation = 'getList';\n          var url = urlHandler.fetchUrl(this, what);\n          var whatFetched = what || __this[config.restangularFields.route];\n\n          var request = config.fullRequestInterceptor(null, operation,\n            whatFetched, url, headers || {}, reqParams || {}, this[config.restangularFields.httpConfig] || {});\n\n          var filledArray = [];\n          filledArray = config.transformElem(filledArray, true, whatFetched, service);\n\n          var method = 'getList';\n\n          if (config.jsonp) {\n            method = 'jsonp';\n          }\n\n          var okCallback = function(response) {\n            var resData = response.data;\n            var fullParams = response.config.params;\n            var data = parseResponse(resData, operation, whatFetched, url, response, deferred);\n\n            // support empty response for getList() calls (some APIs respond with 204 and empty body)\n            if (_.isUndefined(data) || '' === data) {\n              data = [];\n            }\n            if (!_.isArray(data)) {\n              throw new Error('Response for getList SHOULD be an array and not an object or something else');\n            }\n\n            if (true === config.plainByDefault) {\n              return resolvePromise(deferred, response, data, filledArray);\n            }\n\n            var processedData = _.map(data, function(elem) {\n              if (!__this[config.restangularFields.restangularCollection]) {\n                return restangularizeElem(__this, elem, what, true, data);\n              } else {\n                return restangularizeElem(__this[config.restangularFields.parentResource],\n                  elem, __this[config.restangularFields.route], true, data);\n              }\n            });\n\n            processedData = _.extend(data, processedData);\n\n            if (!__this[config.restangularFields.restangularCollection]) {\n              resolvePromise(\n                deferred,\n                response,\n                restangularizeCollection(\n                  __this,\n                  processedData,\n                  what,\n                  true,\n                  fullParams\n                ),\n                filledArray\n              );\n            } else {\n              resolvePromise(\n                deferred,\n                response,\n                restangularizeCollection(\n                  __this[config.restangularFields.parentResource],\n                  processedData,\n                  __this[config.restangularFields.route],\n                  true,\n                  fullParams\n                ),\n                filledArray\n              );\n            }\n          };\n\n          urlHandler.resource(this, $http, request.httpConfig, request.headers, request.params, what,\n            this[config.restangularFields.etag], operation)[method]().then(okCallback, function error(response) {\n            if (response.status === 304 && __this[config.restangularFields.restangularCollection]) {\n              resolvePromise(deferred, response, __this, filledArray);\n            } else if (_.every(config.errorInterceptors, function(cb) {\n                return cb(response, deferred, okCallback) !== false;\n              })) {\n              // triggered if no callback returns false\n              deferred.reject(response);\n            }\n          });\n\n          return restangularizePromise(deferred.promise, true, filledArray);\n        }\n\n        function withHttpConfig(httpConfig) {\n          this[config.restangularFields.httpConfig] = httpConfig;\n          return this;\n        }\n\n        function save(params, headers) {\n          if (this[config.restangularFields.fromServer]) {\n            return this[config.restangularFields.put](params, headers);\n          } else {\n            return _.bind(elemFunction, this)('post', undefined, params, undefined, headers);\n          }\n        }\n\n        function elemFunction(operation, what, params, obj, headers) {\n          var __this = this;\n          var deferred = $q.defer();\n          var resParams = params || {};\n          var route = what || this[config.restangularFields.route];\n          var fetchUrl = urlHandler.fetchUrl(this, what);\n\n          var callObj = obj || this;\n          // fallback to etag on restangular object (since for custom methods we probably don't explicitly specify the etag field)\n          var etag = callObj[config.restangularFields.etag] || (operation !== 'post' ? this[config.restangularFields.etag] : null);\n\n          if (_.isObject(callObj) && config.isRestangularized(callObj)) {\n            callObj = stripRestangular(callObj);\n          }\n          var request = config.fullRequestInterceptor(callObj, operation, route, fetchUrl,\n            headers || {}, resParams || {}, this[config.restangularFields.httpConfig] || {});\n\n          var filledObject = {};\n          filledObject = config.transformElem(filledObject, false, route, service);\n\n          var okCallback = function(response) {\n            var resData = response.data;\n            var fullParams = response.config.params;\n            var elem = parseResponse(resData, operation, route, fetchUrl, response, deferred);\n\n            // accept 0 as response\n            if (elem !== null && elem !== undefined && elem !== '') {\n              var data;\n\n              if (true === config.plainByDefault) {\n                return resolvePromise(deferred, response, elem, filledObject);\n              }\n\n              if (operation === 'post' && !__this[config.restangularFields.restangularCollection]) {\n                data = restangularizeElem(\n                  __this[config.restangularFields.parentResource],\n                  elem,\n                  route,\n                  true,\n                  null,\n                  fullParams\n                );\n                resolvePromise(deferred, response, data, filledObject);\n              } else {\n                data = restangularizeElem(\n                  __this[config.restangularFields.parentResource],\n                  elem,\n                  __this[config.restangularFields.route],\n                  true,\n                  null,\n                  fullParams\n                );\n\n                data[config.restangularFields.singleOne] = __this[config.restangularFields.singleOne];\n                resolvePromise(deferred, response, data, filledObject);\n              }\n\n            } else {\n              resolvePromise(deferred, response, undefined, filledObject);\n            }\n          };\n\n          var errorCallback = function(response) {\n            if (response.status === 304 && config.isSafe(operation)) {\n              resolvePromise(deferred, response, __this, filledObject);\n            } else if (_.every(config.errorInterceptors, function(cb) {\n                return cb(response, deferred, okCallback) !== false;\n              })) {\n              // triggered if no callback returns false\n              deferred.reject(response);\n            }\n          };\n          // Overriding HTTP Method\n          var callOperation = operation;\n          var callHeaders = _.extend({}, request.headers);\n          var isOverrideOperation = config.isOverridenMethod(operation);\n          if (isOverrideOperation) {\n            callOperation = 'post';\n            callHeaders = _.extend(callHeaders, {\n              'X-HTTP-Method-Override': operation === 'remove' ? 'DELETE' : operation.toUpperCase()\n            });\n          } else if (config.jsonp && callOperation === 'get') {\n            callOperation = 'jsonp';\n          }\n\n          if (config.isSafe(operation)) {\n            if (isOverrideOperation) {\n              urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n                what, etag, callOperation)[callOperation]({}).then(okCallback, errorCallback);\n            } else {\n              urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n                what, etag, callOperation)[callOperation]().then(okCallback, errorCallback);\n            }\n          } else {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n              what, etag, callOperation)[callOperation](request.element).then(okCallback, errorCallback);\n          }\n\n          return restangularizePromise(deferred.promise, false, filledObject);\n        }\n\n        function getFunction(params, headers) {\n          return _.bind(elemFunction, this)('get', undefined, params, undefined, headers);\n        }\n\n        function deleteFunction(params, headers) {\n          return _.bind(elemFunction, this)('remove', undefined, params, undefined, headers);\n        }\n\n        function putFunction(params, headers) {\n          return _.bind(elemFunction, this)('put', undefined, params, undefined, headers);\n        }\n\n        function postFunction(what, elem, params, headers) {\n          return _.bind(elemFunction, this)('post', what, params, elem, headers);\n        }\n\n        function headFunction(params, headers) {\n          return _.bind(elemFunction, this)('head', undefined, params, undefined, headers);\n        }\n\n        function traceFunction(params, headers) {\n          return _.bind(elemFunction, this)('trace', undefined, params, undefined, headers);\n        }\n\n        function optionsFunction(params, headers) {\n          return _.bind(elemFunction, this)('options', undefined, params, undefined, headers);\n        }\n\n        function patchFunction(elem, params, headers) {\n          return _.bind(elemFunction, this)('patch', undefined, params, elem, headers);\n        }\n\n        function customFunction(operation, path, params, headers, elem) {\n          return _.bind(elemFunction, this)(operation, path, params, elem, headers);\n        }\n\n        function addRestangularMethodFunction(name, operation, path, defaultParams, defaultHeaders, defaultElem) {\n          var bindedFunction;\n          if (operation === 'getList') {\n            bindedFunction = _.bind(fetchFunction, this, path);\n          } else {\n            bindedFunction = _.bind(customFunction, this, operation, path);\n          }\n\n          var createdFunction = function(params, headers, elem) {\n            var callParams = _.defaults({\n              params: params,\n              headers: headers,\n              elem: elem\n            }, {\n              params: defaultParams,\n              headers: defaultHeaders,\n              elem: defaultElem\n            });\n            return bindedFunction(callParams.params, callParams.headers, callParams.elem);\n          };\n\n          if (config.isSafe(operation)) {\n            this[name] = createdFunction;\n          } else {\n            this[name] = function(elem, params, headers) {\n              return createdFunction(params, headers, elem);\n            };\n          }\n        }\n\n        function withConfigurationFunction(configurer) {\n          var newConfig = angular.copy(_.omit(config, 'configuration'));\n          Configurer.init(newConfig, newConfig);\n          configurer(newConfig);\n          return createServiceForConfiguration(newConfig);\n        }\n\n        function toService(route, parent) {\n          var knownCollectionMethods = _.values(config.restangularFields);\n          var serv = {};\n          var collection = (parent || service).all(route);\n          serv.one = _.bind(one, (parent || service), parent, route);\n          serv.post = _.bind(collection.post, collection);\n          serv.getList = _.bind(collection.getList, collection);\n          serv.withHttpConfig = _.bind(collection.withHttpConfig, collection);\n          serv.get = _.bind(collection.get, collection);\n\n          for (var prop in collection) {\n            if (collection.hasOwnProperty(prop) && _.isFunction(collection[prop]) && !_.includes(knownCollectionMethods, prop)) {\n              serv[prop] = _.bind(collection[prop], collection);\n            }\n          }\n\n          return serv;\n        }\n\n\n        Configurer.init(service, config);\n\n        service.copy = _.bind(copyRestangularizedElement, service);\n\n        service.service = _.bind(toService, service);\n\n        service.withConfig = _.bind(withConfigurationFunction, service);\n\n        service.one = _.bind(one, service, null);\n\n        service.all = _.bind(all, service, null);\n\n        service.several = _.bind(several, service, null);\n\n        service.oneUrl = _.bind(oneUrl, service, null);\n\n        service.allUrl = _.bind(allUrl, service, null);\n\n        service.stripRestangular = _.bind(stripRestangular, service);\n\n        service.restangularizeElement = _.bind(restangularizeElem, service);\n\n        service.restangularizeCollection = _.bind(restangularizeCollectionAndElements, service);\n\n        return service;\n      }\n\n      return createServiceForConfiguration(globalConfiguration);\n    }];\n  });\n  return restangular.name;\n}));\n","/home/travis/build/npmtest/node-npmtest-restangular/node_modules/restangular/Gruntfile.js":"module.exports = function(grunt) {\n  'use strict';\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    meta: {\n      banner: [\n                '/**',\n                ' * <%= pkg.description %>',\n                ' * @version v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>' +\n                ' * @link <%= pkg.homepage %>',\n                ' * @author <%= pkg.author %>',\n                ' * @license MIT License, http://www.opensource.org/licenses/MIT',\n                ' */'\n              ].join('\\n')\n    },\n    dirs: {\n      dest: 'dist'\n    },\n    concat: {\n      options: {\n        banner: '<%= meta.banner %>'\n      },\n      dist: {\n        src: ['src/*.js'],\n        dest: '<%= dirs.dest %>/<%= pkg.name %>.js'\n      }\n    },\n    zip: {\n      '<%= dirs.dest %>/restangular.zip': [\n        '<%= dirs.dest %>/<%= pkg.name %>.js',\n        '<%= dirs.dest %>/<%= pkg.name %>.min.js'\n      ]\n    },\n    bowerInstall: {\n        install: {\n        }\n    },\n    uglify: {\n      options: {\n        banner: '<%= meta.banner %>'\n      },\n      dist: {\n        src: ['<%= concat.dist.dest %>'],\n        dest: '<%= dirs.dest %>/<%= pkg.name %>.min.js'\n      }\n    },\n    jshint: {\n      files: ['Gruntfile.js', 'src/*.js'],\n      options: {\n        jshintrc: true\n      }\n    },\n    karma: {\n      options: {\n        configFile: 'karma.conf.js'\n      },\n      build: {\n        singleRun: true,\n        autoWatch: false\n      },\n      debug: {\n        singleRun: false,\n        autoWatch: true,\n        browsers: ['Chrome']\n      },\n      travis: {\n        singleRun: true,\n        autoWatch: false,\n        browsers: ['Firefox']\n      },\n      travisUnderscore: {\n        singleRun: true,\n        autoWatch: false,\n        browsers: ['Firefox'],\n        configFile: 'karma.underscore.conf.js',\n      },\n      buildUnderscore: {\n        configFile: 'karma.underscore.conf.js',\n        singleRun: true,\n        autoWatch: false\n      },\n      dev: {\n        autoWatch: true\n      }\n    },\n    coveralls: {\n      // Options relevant to all targets\n      options: {\n        // When true, grunt-coveralls will only print a warning rather than\n        // an error, to prevent CI builds from failing unnecessarily (e.g. if\n        // coveralls.io is down). Optional, defaults to false.\n        force: false\n      },\n\n      restangular: {\n        // LCOV coverage file (can be string, glob or array)\n        src: 'coverage/**/lcov.info',\n        options: {\n          // Any options for just this target\n        }\n      },\n    },\n    conventionalChangelog: {\n      options: {\n        changelogOpts: {\n          // conventional-changelog options go here\n          outputUnreleased: true,\n          // preset: 'angular'\n        },\n        context: {\n          // context goes here\n        },\n        gitRawCommitsOpts: {\n          // git-raw-commits options go here\n        },\n        parserOpts: {\n          // conventional-commits-parser options go here\n        },\n        writerOpts: {\n          // conventional-changelog-writer options go here\n        }\n      },\n      release: {\n        src: 'CHANGELOG.md'\n      }\n    }\n  });\n\n  // Load the plugin that provides the \"jshint\" task.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  // Load the plugin that provides the \"concat\" task.\n  grunt.loadNpmTasks('grunt-contrib-concat');\n\n  // Load the plugin that provides the \"uglify\" task.\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n\n  grunt.loadNpmTasks('grunt-bower-task');\n\n  grunt.renameTask('bower', 'bowerInstall');\n\n  grunt.loadNpmTasks('grunt-karma');\n\n  grunt.loadNpmTasks('grunt-conventional-changelog');\n\n  grunt.loadNpmTasks('grunt-zip');\n\n  grunt.loadNpmTasks('grunt-coveralls');\n\n\n  // Default task.\n  grunt.registerTask('default', ['build']);\n\n  // Build task.\n  grunt.registerTask('build', ['bowerInstall', 'karma:build', 'karma:buildUnderscore', 'concat', 'uglify', 'zip']);\n\n  grunt.registerTask('test', ['karma:build', 'karma:buildUnderscore']);\n\n  grunt.registerTask('test-debug', ['karma:debug']);\n\n  grunt.registerTask('travis', ['karma:travis', 'karma:travisUnderscore', 'coveralls']);\n\n  grunt.registerTask('changelog', ['conventionalChangelog']);\n\n  // Provides the \"bump\" task.\n  grunt.registerTask('bump', 'Increment version number', function() {\n    var versionType = grunt.option('type');\n    function bumpVersion(version, versionType) {\n      var type = {patch: 2, minor: 1, major: 0},\n          parts = version.split('.'),\n          idx = type[versionType || 'patch'];\n      parts[idx] = parseInt(parts[idx], 10) + 1;\n      while(++idx < parts.length) { parts[idx] = 0; }\n      return parts.join('.');\n    }\n    var version;\n    function updateFile(file) {\n      var json = grunt.file.readJSON(file);\n      version = json.version = bumpVersion(json.version, versionType || 'patch');\n      grunt.file.write(file, JSON.stringify(json, null, '  '));\n    }\n    updateFile('package.json');\n    grunt.log.ok('Version bumped to ' + version);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-restangular/node_modules/restangular/karma.conf.js":"// Karma configuration\n\nvar angularVersion = '1.5.9';\nvar lodashVersion = '4.17.2';\n\nmodule.exports = function (config) {\n  config.set({\n\n    // base path, that will be used to resolve files and exclude\n    basePath: '',\n\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    files: [\n      'https://cdnjs.cloudflare.com/ajax/libs/angular.js/' + angularVersion + '/angular.js',\n      'https://cdnjs.cloudflare.com/ajax/libs/angular.js/' + angularVersion + '/angular-mocks.js',\n      'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/' + lodashVersion + '/lodash.js',\n      'src/restangular.js',\n      'test/*.js'\n    ],\n\n\n    // list of files to exclude\n    exclude: [\n\n    ],\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress', 'junit'\n    reporters: ['mocha', 'coverage'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // cli runner port\n    runnerPort: 9100,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // Start these browsers, currently available:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: ['PhantomJS'],\n\n\n    // If browser does not capture in given timeout [ms], kill it\n    captureTimeout: 60000,\n\n\n    // Continuous Integration mode\n    // if true, it capture browsers, run tests and exit\n    singleRun: false,\n\n    preprocessors: {\n      // source files, that you wanna generate coverage for\n      // do not include tests or libraries\n      // (these files will be instrumented by Istanbul)\n      'src/**/*.js': ['coverage']\n    },\n\n    // optionally, configure the reporter\n    coverageReporter: {\n      type: 'lcov',\n      dir : 'coverage/'\n    }\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-restangular/node_modules/restangular/karma.underscore.conf.js":"// Karma configuration for use with underscore instead of lodash\n\nvar angularVersion = '1.5.9';\nvar underscoreVersion = '1.8.3';\n\n\nmodule.exports = function (config) {\n  config.set({\n\n    // base path, that will be used to resolve files and exclude\n    basePath: '',\n\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    files: [\n      'https://cdnjs.cloudflare.com/ajax/libs/angular.js/' + angularVersion + '/angular.js',\n      'https://cdnjs.cloudflare.com/ajax/libs/angular.js/' + angularVersion + '/angular-mocks.js',\n      'https://cdnjs.cloudflare.com/ajax/libs/underscore.js/' + underscoreVersion + '/underscore.js',\n      'src/restangular.js',\n      'test/*.js'\n    ],\n\n\n    // list of files to exclude\n    exclude: [\n\n    ],\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress', 'junit'\n    reporters: ['progress'],\n\n\n    // web server port\n    port: 9877,\n\n\n    // cli runner port\n    runnerPort: 9101,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // Start these browsers, currently available:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: ['PhantomJS'],\n\n\n    // If browser does not capture in given timeout [ms], kill it\n    captureTimeout: 60000,\n\n\n    // Continuous Integration mode\n    // if true, it capture browsers, run tests and exit\n    singleRun: false\n\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-restangular/node_modules/restangular/src/restangular.js":"(function(root, factory) {\n  /* global define, require */\n  // https://github.com/umdjs/umd/blob/master/templates/returnExports.js\n  if (typeof define === 'function' && define.amd) {\n    define(['lodash', 'angular'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory(require('lodash'), require('angular'));\n  } else {\n    // No global export, Restangular will register itself as Angular.js module\n    factory(root._, root.angular);\n  }\n}(this, function(_, angular) {\n\n  var restangular = angular.module('restangular', []);\n\n  restangular.provider('Restangular', function() {\n    // Configuration\n    var Configurer = {};\n    Configurer.init = function(object, config) {\n      object.configuration = config;\n\n      /**\n       * Those are HTTP safe methods for which there is no need to pass any data with the request.\n       */\n      var safeMethods = ['get', 'head', 'options', 'trace', 'getlist'];\n      config.isSafe = function(operation) {\n        return _.includes(safeMethods, operation.toLowerCase());\n      };\n\n      var absolutePattern = /^https?:\\/\\//i;\n      config.isAbsoluteUrl = function(string) {\n        return _.isUndefined(config.absoluteUrl) || _.isNull(config.absoluteUrl) ?\n          string && absolutePattern.test(string) :\n          config.absoluteUrl;\n      };\n\n      config.absoluteUrl = _.isUndefined(config.absoluteUrl) ? true : config.absoluteUrl;\n      object.setSelfLinkAbsoluteUrl = function(value) {\n        config.absoluteUrl = value;\n      };\n      /**\n       * This is the BaseURL to be used with Restangular\n       */\n      config.baseUrl = _.isUndefined(config.baseUrl) ? '' : config.baseUrl;\n      object.setBaseUrl = function(newBaseUrl) {\n        config.baseUrl = /\\/$/.test(newBaseUrl) ?\n          newBaseUrl.substring(0, newBaseUrl.length - 1) :\n          newBaseUrl;\n        return this;\n      };\n\n      /**\n       * Sets the extra fields to keep from the parents\n       */\n      config.extraFields = config.extraFields || [];\n      object.setExtraFields = function(newExtraFields) {\n        config.extraFields = newExtraFields;\n        return this;\n      };\n\n      /**\n       * Some default $http parameter to be used in EVERY call\n       **/\n      config.defaultHttpFields = config.defaultHttpFields || {};\n      object.setDefaultHttpFields = function(values) {\n        config.defaultHttpFields = values;\n        return this;\n      };\n\n      /**\n       * Always return plain data, no restangularized object\n       **/\n      config.plainByDefault = config.plainByDefault || false;\n      object.setPlainByDefault = function(value) {\n        config.plainByDefault = value === true ? true : false;\n        return this;\n      };\n\n      config.withHttpValues = function(httpLocalConfig, obj) {\n        return _.defaults(obj, httpLocalConfig, config.defaultHttpFields);\n      };\n\n      config.encodeIds = _.isUndefined(config.encodeIds) ? true : config.encodeIds;\n      object.setEncodeIds = function(encode) {\n        config.encodeIds = encode;\n      };\n\n      config.defaultRequestParams = config.defaultRequestParams || {\n        get: {},\n        post: {},\n        put: {},\n        remove: {},\n        common: {}\n      };\n\n      object.setDefaultRequestParams = function(param1, param2) {\n        var methods = [],\n          params = param2 || param1;\n        if (!_.isUndefined(param2)) {\n          if (_.isArray(param1)) {\n            methods = param1;\n          } else {\n            methods.push(param1);\n          }\n        } else {\n          methods.push('common');\n        }\n\n        _.each(methods, function(method) {\n          config.defaultRequestParams[method] = params;\n        });\n        return this;\n      };\n\n      object.requestParams = config.defaultRequestParams;\n\n      config.defaultHeaders = config.defaultHeaders || {};\n      object.setDefaultHeaders = function(headers) {\n        config.defaultHeaders = headers;\n        object.defaultHeaders = config.defaultHeaders;\n        return this;\n      };\n\n      object.defaultHeaders = config.defaultHeaders;\n\n      /**\n       * Method overriders will set which methods are sent via POST with an X-HTTP-Method-Override\n       **/\n      config.methodOverriders = config.methodOverriders || [];\n      object.setMethodOverriders = function(values) {\n        var overriders = _.extend([], values);\n        if (config.isOverridenMethod('delete', overriders)) {\n          overriders.push('remove');\n        }\n        config.methodOverriders = overriders;\n        return this;\n      };\n\n      config.jsonp = _.isUndefined(config.jsonp) ? false : config.jsonp;\n      object.setJsonp = function(active) {\n        config.jsonp = active;\n      };\n\n      config.isOverridenMethod = function(method, values) {\n        var search = values || config.methodOverriders;\n        return !_.isUndefined(_.find(search, function(one) {\n          return one.toLowerCase() === method.toLowerCase();\n        }));\n      };\n\n      /**\n       * Sets the URL creator type. For now, only Path is created. In the future we'll have queryParams\n       **/\n      config.urlCreator = config.urlCreator || 'path';\n      object.setUrlCreator = function(name) {\n        if (!_.has(config.urlCreatorFactory, name)) {\n          throw new Error('URL Path selected isn\\'t valid');\n        }\n\n        config.urlCreator = name;\n        return this;\n      };\n\n      /**\n       * You can set the restangular fields here. The 3 required fields for Restangular are:\n       *\n       * id: Id of the element\n       * route: name of the route of this element\n       * parentResource: the reference to the parent resource\n       *\n       *  All of this fields except for id, are handled (and created) by Restangular. By default,\n       *  the field values will be id, route and parentResource respectively\n       */\n      config.restangularFields = config.restangularFields || {\n        id: 'id',\n        route: 'route',\n        parentResource: 'parentResource',\n        restangularCollection: 'restangularCollection',\n        cannonicalId: '__cannonicalId',\n        etag: 'restangularEtag',\n        selfLink: 'href',\n        get: 'get',\n        getList: 'getList',\n        put: 'put',\n        post: 'post',\n        remove: 'remove',\n        head: 'head',\n        trace: 'trace',\n        options: 'options',\n        patch: 'patch',\n        getRestangularUrl: 'getRestangularUrl',\n        getRequestedUrl: 'getRequestedUrl',\n        putElement: 'putElement',\n        addRestangularMethod: 'addRestangularMethod',\n        getParentList: 'getParentList',\n        clone: 'clone',\n        ids: 'ids',\n        httpConfig: '_$httpConfig',\n        reqParams: 'reqParams',\n        one: 'one',\n        all: 'all',\n        several: 'several',\n        oneUrl: 'oneUrl',\n        allUrl: 'allUrl',\n        customPUT: 'customPUT',\n        customPATCH: 'customPATCH',\n        customPOST: 'customPOST',\n        customDELETE: 'customDELETE',\n        customGET: 'customGET',\n        customGETLIST: 'customGETLIST',\n        customOperation: 'customOperation',\n        doPUT: 'doPUT',\n        doPATCH: 'doPATCH',\n        doPOST: 'doPOST',\n        doDELETE: 'doDELETE',\n        doGET: 'doGET',\n        doGETLIST: 'doGETLIST',\n        fromServer: 'fromServer',\n        withConfig: 'withConfig',\n        withHttpConfig: 'withHttpConfig',\n        singleOne: 'singleOne',\n        plain: 'plain',\n        save: 'save',\n        restangularized: 'restangularized'\n      };\n      object.setRestangularFields = function(resFields) {\n        config.restangularFields =\n          _.extend(config.restangularFields, resFields);\n        return this;\n      };\n\n      config.isRestangularized = function(obj) {\n        return !!obj[config.restangularFields.restangularized];\n      };\n\n      config.setFieldToElem = function(field, elem, value) {\n        var properties = field.split('.');\n        var idValue = elem;\n        _.each(_.initial(properties), function(prop) {\n          idValue[prop] = {};\n          idValue = idValue[prop];\n        });\n        idValue[_.last(properties)] = value;\n        return this;\n      };\n\n      config.getFieldFromElem = function(field, elem) {\n        var properties = field.split('.');\n        var idValue = elem;\n        _.each(properties, function(prop) {\n          if (idValue) {\n            idValue = idValue[prop];\n          }\n        });\n        return angular.copy(idValue);\n      };\n\n      config.setIdToElem = function(elem, id /*, route */ ) {\n        config.setFieldToElem(config.restangularFields.id, elem, id);\n        return this;\n      };\n\n      config.getIdFromElem = function(elem) {\n        return config.getFieldFromElem(config.restangularFields.id, elem);\n      };\n\n      config.isValidId = function(elemId) {\n        return '' !== elemId && !_.isUndefined(elemId) && !_.isNull(elemId);\n      };\n\n      config.setUrlToElem = function(elem, url /*, route */ ) {\n        config.setFieldToElem(config.restangularFields.selfLink, elem, url);\n        return this;\n      };\n\n      config.getUrlFromElem = function(elem) {\n        return config.getFieldFromElem(config.restangularFields.selfLink, elem);\n      };\n\n      config.useCannonicalId = _.isUndefined(config.useCannonicalId) ? false : config.useCannonicalId;\n      object.setUseCannonicalId = function(value) {\n        config.useCannonicalId = value;\n        return this;\n      };\n\n      config.getCannonicalIdFromElem = function(elem) {\n        var cannonicalId = elem[config.restangularFields.cannonicalId];\n        var actualId = config.isValidId(cannonicalId) ? cannonicalId : config.getIdFromElem(elem);\n        return actualId;\n      };\n\n      /**\n       * Sets the Response parser. This is used in case your response isn't directly the data.\n       * For example if you have a response like {meta: {'meta'}, data: {name: 'Gonto'}}\n       * you can extract this data which is the one that needs wrapping\n       *\n       * The ResponseExtractor is a function that receives the response and the method executed.\n       */\n\n      config.responseInterceptors = config.responseInterceptors || [];\n\n      config.defaultResponseInterceptor = function(data /*, operation, what, url, response, deferred */ ) {\n        return data;\n      };\n\n      config.responseExtractor = function(data, operation, what, url, response, deferred) {\n        var interceptors = angular.copy(config.responseInterceptors);\n        interceptors.push(config.defaultResponseInterceptor);\n        var theData = data;\n        _.each(interceptors, function(interceptor) {\n          theData = interceptor(theData, operation,\n            what, url, response, deferred);\n        });\n        return theData;\n      };\n\n      object.addResponseInterceptor = function(extractor) {\n        config.responseInterceptors.push(extractor);\n        return this;\n      };\n\n      config.errorInterceptors = config.errorInterceptors || [];\n      object.addErrorInterceptor = function(interceptor) {\n        config.errorInterceptors.push(interceptor);\n        return this;\n      };\n\n      object.setResponseInterceptor = object.addResponseInterceptor;\n      object.setResponseExtractor = object.addResponseInterceptor;\n      object.setErrorInterceptor = object.addErrorInterceptor;\n\n      /**\n       * Response interceptor is called just before resolving promises.\n       */\n\n\n      /**\n       * Request interceptor is called before sending an object to the server.\n       */\n      config.requestInterceptors = config.requestInterceptors || [];\n\n      config.defaultInterceptor = function(element, operation, path, url, headers, params, httpConfig) {\n        return {\n          element: element,\n          headers: headers,\n          params: params,\n          httpConfig: httpConfig\n        };\n      };\n\n      config.fullRequestInterceptor = function(element, operation, path, url, headers, params, httpConfig) {\n        var interceptors = angular.copy(config.requestInterceptors);\n        var defaultRequest = config.defaultInterceptor(element, operation, path, url, headers, params, httpConfig);\n        return _.reduce(interceptors, function(request, interceptor) {\n          return _.extend(request, interceptor(request.element, operation,\n            path, url, request.headers, request.params, request.httpConfig));\n        }, defaultRequest);\n      };\n\n      object.addRequestInterceptor = function(interceptor) {\n        config.requestInterceptors.push(function(elem, operation, path, url, headers, params, httpConfig) {\n          return {\n            headers: headers,\n            params: params,\n            element: interceptor(elem, operation, path, url),\n            httpConfig: httpConfig\n          };\n        });\n        return this;\n      };\n\n      object.setRequestInterceptor = object.addRequestInterceptor;\n\n      object.addFullRequestInterceptor = function(interceptor) {\n        config.requestInterceptors.push(interceptor);\n        return this;\n      };\n\n      object.setFullRequestInterceptor = object.addFullRequestInterceptor;\n\n      config.onBeforeElemRestangularized = config.onBeforeElemRestangularized || function(elem) {\n        return elem;\n      };\n      object.setOnBeforeElemRestangularized = function(post) {\n        config.onBeforeElemRestangularized = post;\n        return this;\n      };\n\n      object.setRestangularizePromiseInterceptor = function(interceptor) {\n        config.restangularizePromiseInterceptor = interceptor;\n        return this;\n      };\n\n      /**\n       * This method is called after an element has been \"Restangularized\".\n       *\n       * It receives the element, a boolean indicating if it's an element or a collection\n       * and the name of the model\n       *\n       */\n      config.onElemRestangularized = config.onElemRestangularized || function(elem) {\n        return elem;\n      };\n      object.setOnElemRestangularized = function(post) {\n        config.onElemRestangularized = post;\n        return this;\n      };\n\n      config.shouldSaveParent = config.shouldSaveParent || function() {\n        return true;\n      };\n      object.setParentless = function(values) {\n        if (_.isArray(values)) {\n          config.shouldSaveParent = function(route) {\n            return !_.includes(values, route);\n          };\n        } else if (_.isBoolean(values)) {\n          config.shouldSaveParent = function() {\n            return !values;\n          };\n        }\n        return this;\n      };\n\n      /**\n       * This lets you set a suffix to every request.\n       *\n       * For example, if your api requires that for JSon requests you do /users/123.json, you can set that\n       * in here.\n       *\n       *\n       * By default, the suffix is null\n       */\n      config.suffix = _.isUndefined(config.suffix) ? null : config.suffix;\n      object.setRequestSuffix = function(newSuffix) {\n        config.suffix = newSuffix;\n        return this;\n      };\n\n      /**\n       * Add element transformers for certain routes.\n       */\n      config.transformers = config.transformers || {};\n      config.matchTransformers = config.matchTransformers || [];\n      object.addElementTransformer = function(type, secondArg, thirdArg) {\n        var isCollection = null;\n        var transformer = null;\n        if (arguments.length === 2) {\n          transformer = secondArg;\n        } else {\n          transformer = thirdArg;\n          isCollection = secondArg;\n        }\n\n        var transformerFn = function(coll, elem) {\n          if (_.isNull(isCollection) || (coll === isCollection)) {\n            return transformer(elem);\n          }\n          return elem;\n        };\n\n        if (_.isRegExp(type)) {\n          config.matchTransformers.push({\n            regexp: type,\n            transformer: transformerFn\n          });\n        } else {\n          if (!config.transformers[type]) {\n            config.transformers[type] = [];\n          }\n          config.transformers[type].push(transformerFn);\n        }\n\n        return object;\n      };\n\n      object.extendCollection = function(route, fn) {\n        return object.addElementTransformer(route, true, fn);\n      };\n\n      object.extendModel = function(route, fn) {\n        return object.addElementTransformer(route, false, fn);\n      };\n\n      config.transformElem = function(elem, isCollection, route, Restangular, force) {\n        if (!force && !config.transformLocalElements && !elem[config.restangularFields.fromServer]) {\n          return elem;\n        }\n\n        var changedElem = elem;\n\n        var matchTransformers = config.matchTransformers;\n        if (matchTransformers) {\n          _.each(matchTransformers, function(transformer) {\n            if (transformer.regexp.test(route)) {\n              changedElem = transformer.transformer(isCollection, changedElem);\n            }\n          });\n        }\n\n        var typeTransformers = config.transformers[route];\n        if (typeTransformers) {\n          _.each(typeTransformers, function(transformer) {\n            changedElem = transformer(isCollection, changedElem);\n          });\n        }\n        return config.onElemRestangularized(changedElem, isCollection, route, Restangular);\n      };\n\n      config.transformLocalElements = _.isUndefined(config.transformLocalElements) ?\n        false :\n        config.transformLocalElements;\n\n      object.setTransformOnlyServerElements = function(active) {\n        config.transformLocalElements = !active;\n      };\n\n      config.fullResponse = _.isUndefined(config.fullResponse) ? false : config.fullResponse;\n      object.setFullResponse = function(full) {\n        config.fullResponse = full;\n        return this;\n      };\n\n\n      //Internal values and functions\n      config.urlCreatorFactory = {};\n\n      /**\n       * Base URL Creator. Base prototype for everything related to it\n       **/\n\n      var BaseCreator = function() {};\n\n      BaseCreator.prototype.setConfig = function(config) {\n        this.config = config;\n        return this;\n      };\n\n      BaseCreator.prototype.parentsArray = function(current) {\n        var parents = [];\n        while (current) {\n          parents.push(current);\n          current = current[this.config.restangularFields.parentResource];\n        }\n        return parents.reverse();\n      };\n\n      function RestangularResource(config, $http, url, configurer) {\n        var resource = {};\n        _.each(_.keys(configurer), function(key) {\n          var value = configurer[key];\n\n          // Add default parameters\n          value.params = _.extend({}, value.params, config.defaultRequestParams[value.method.toLowerCase()]);\n          // We don't want the ? if no params are there\n          if (_.isEmpty(value.params)) {\n            delete value.params;\n          }\n\n          if (config.isSafe(value.method)) {\n\n            resource[key] = function() {\n              return $http(_.extend(value, {\n                url: url\n              }));\n            };\n\n          } else {\n\n            resource[key] = function(data) {\n              return $http(_.extend(value, {\n                url: url,\n                data: data\n              }));\n            };\n\n          }\n        });\n\n        return resource;\n      }\n\n      BaseCreator.prototype.resource = function(current, $http, localHttpConfig, callHeaders, callParams, what, etag, operation) {\n\n        var params = _.defaults(callParams || {}, this.config.defaultRequestParams.common);\n        var headers = _.defaults(callHeaders || {}, this.config.defaultHeaders);\n\n        if (etag) {\n          if (!config.isSafe(operation)) {\n            headers['If-Match'] = etag;\n          } else {\n            headers['If-None-Match'] = etag;\n          }\n        }\n\n        var url = this.base(current);\n\n        if (what || what === 0) {\n          var add = '';\n          if (!/\\/$/.test(url)) {\n            add += '/';\n          }\n          add += what;\n          url += add;\n        }\n\n        if (this.config.suffix &&\n          url.indexOf(this.config.suffix, url.length - this.config.suffix.length) === -1 &&\n          !this.config.getUrlFromElem(current)) {\n          url += this.config.suffix;\n        }\n\n        current[this.config.restangularFields.httpConfig] = undefined;\n\n        return RestangularResource(this.config, $http, url, {\n          getList: this.config.withHttpValues(localHttpConfig, {\n            method: 'GET',\n            params: params,\n            headers: headers\n          }),\n\n          get: this.config.withHttpValues(localHttpConfig, {\n            method: 'GET',\n            params: params,\n            headers: headers\n          }),\n\n          jsonp: this.config.withHttpValues(localHttpConfig, {\n            method: 'jsonp',\n            params: params,\n            headers: headers\n          }),\n\n          put: this.config.withHttpValues(localHttpConfig, {\n            method: 'PUT',\n            params: params,\n            headers: headers\n          }),\n\n          post: this.config.withHttpValues(localHttpConfig, {\n            method: 'POST',\n            params: params,\n            headers: headers\n          }),\n\n          remove: this.config.withHttpValues(localHttpConfig, {\n            method: 'DELETE',\n            params: params,\n            headers: headers\n          }),\n\n          head: this.config.withHttpValues(localHttpConfig, {\n            method: 'HEAD',\n            params: params,\n            headers: headers\n          }),\n\n          trace: this.config.withHttpValues(localHttpConfig, {\n            method: 'TRACE',\n            params: params,\n            headers: headers\n          }),\n\n          options: this.config.withHttpValues(localHttpConfig, {\n            method: 'OPTIONS',\n            params: params,\n            headers: headers\n          }),\n\n          patch: this.config.withHttpValues(localHttpConfig, {\n            method: 'PATCH',\n            params: params,\n            headers: headers\n          })\n        });\n      };\n\n      /**\n       * This is the Path URL creator. It uses Path to show Hierarchy in the Rest API.\n       * This means that if you have an Account that then has a set of Buildings, a URL to a building\n       * would be /accounts/123/buildings/456\n       **/\n      var Path = function() {};\n\n      Path.prototype = new BaseCreator();\n\n      Path.prototype.normalizeUrl = function(url) {\n        var parts = /((?:http[s]?:)?\\/\\/)?(.*)?/.exec(url);\n        parts[2] = parts[2].replace(/[\\\\\\/]+/g, '/');\n        return (typeof parts[1] !== 'undefined') ? parts[1] + parts[2] : parts[2];\n      };\n\n      Path.prototype.base = function(current) {\n        var __this = this;\n        return _.reduce(this.parentsArray(current), function(acum, elem) {\n          var elemUrl;\n          var elemSelfLink = __this.config.getUrlFromElem(elem);\n          if (elemSelfLink) {\n            if (__this.config.isAbsoluteUrl(elemSelfLink)) {\n              return elemSelfLink;\n            } else {\n              elemUrl = elemSelfLink;\n            }\n          } else {\n            elemUrl = elem[__this.config.restangularFields.route];\n\n            if (elem[__this.config.restangularFields.restangularCollection]) {\n              var ids = elem[__this.config.restangularFields.ids];\n              if (ids) {\n                elemUrl += '/' + ids.join(',');\n              }\n            } else {\n              var elemId;\n              if (__this.config.useCannonicalId) {\n                elemId = __this.config.getCannonicalIdFromElem(elem);\n              } else {\n                elemId = __this.config.getIdFromElem(elem);\n              }\n\n              if (config.isValidId(elemId) && !elem.singleOne) {\n                elemUrl += '/' + (__this.config.encodeIds ? encodeURIComponent(elemId) : elemId);\n              }\n            }\n          }\n          acum = acum.replace(/\\/$/, '') + '/' + elemUrl;\n          return __this.normalizeUrl(acum);\n\n        }, this.config.baseUrl);\n      };\n\n\n\n      Path.prototype.fetchUrl = function(current, what) {\n        var baseUrl = this.base(current);\n        if (what) {\n          baseUrl += '/' + what;\n        }\n        return baseUrl;\n      };\n\n      Path.prototype.fetchRequestedUrl = function(current, what) {\n        var url = this.fetchUrl(current, what);\n        var params = current[config.restangularFields.reqParams];\n\n        // From here on and until the end of fetchRequestedUrl,\n        // the code has been kindly borrowed from angular.js\n        // The reason for such code bloating is coherence:\n        //   If the user were to use this for cache management, the\n        //   serialization of parameters would need to be identical\n        //   to the one done by angular for cache keys to match.\n        function sortedKeys(obj) {\n          var keys = [];\n          for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n              keys.push(key);\n            }\n          }\n          return keys.sort();\n        }\n\n        function forEachSorted(obj, iterator, context) {\n          var keys = sortedKeys(obj);\n          for (var i = 0; i < keys.length; i++) {\n            iterator.call(context, obj[keys[i]], keys[i]);\n          }\n          return keys;\n        }\n\n        function encodeUriQuery(val, pctEncodeSpaces) {\n          return encodeURIComponent(val).\n          replace(/%40/gi, '@').\n          replace(/%3A/gi, ':').\n          replace(/%24/g, '$').\n          replace(/%2C/gi, ',').\n          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n        }\n\n        if (!params) {\n          return url + (this.config.suffix || '');\n        }\n\n        var parts = [];\n        forEachSorted(params, function(value, key) {\n          if (value === null || value === undefined) {\n            return;\n          }\n          if (!angular.isArray(value)) {\n            value = [value];\n          }\n\n          angular.forEach(value, function(v) {\n            if (angular.isObject(v)) {\n              v = angular.toJson(v);\n            }\n            parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));\n          });\n        });\n\n        return url + (this.config.suffix || '') + ((url.indexOf('?') === -1) ? '?' : '&') + parts.join('&');\n      };\n\n      config.urlCreatorFactory.path = Path;\n    };\n\n    var globalConfiguration = {};\n\n    Configurer.init(this, globalConfiguration);\n\n\n\n    this.$get = ['$http', '$q', function($http, $q) {\n\n      function createServiceForConfiguration(config) {\n        var service = {};\n\n        var urlHandler = new config.urlCreatorFactory[config.urlCreator]();\n        urlHandler.setConfig(config);\n\n        function restangularizeBase(parent, elem, route, reqParams, fromServer) {\n          elem[config.restangularFields.route] = route;\n          elem[config.restangularFields.getRestangularUrl] = _.bind(urlHandler.fetchUrl, urlHandler, elem);\n          elem[config.restangularFields.getRequestedUrl] = _.bind(urlHandler.fetchRequestedUrl, urlHandler, elem);\n          elem[config.restangularFields.addRestangularMethod] = _.bind(addRestangularMethodFunction, elem);\n          elem[config.restangularFields.clone] = _.bind(copyRestangularizedElement, elem, elem);\n          elem[config.restangularFields.reqParams] = _.isEmpty(reqParams) ? null : reqParams;\n          elem[config.restangularFields.withHttpConfig] = _.bind(withHttpConfig, elem);\n          elem[config.restangularFields.plain] = _.bind(stripRestangular, elem, elem);\n\n          // Tag element as restangularized\n          elem[config.restangularFields.restangularized] = true;\n\n          // RequestLess connection\n          elem[config.restangularFields.one] = _.bind(one, elem, elem);\n          elem[config.restangularFields.all] = _.bind(all, elem, elem);\n          elem[config.restangularFields.several] = _.bind(several, elem, elem);\n          elem[config.restangularFields.oneUrl] = _.bind(oneUrl, elem, elem);\n          elem[config.restangularFields.allUrl] = _.bind(allUrl, elem, elem);\n\n          elem[config.restangularFields.fromServer] = !!fromServer;\n\n          if (parent && config.shouldSaveParent(route)) {\n            var parentId = config.getIdFromElem(parent);\n            var parentUrl = config.getUrlFromElem(parent);\n\n            var restangularFieldsForParent = _.union(\n              _.values(_.pick(config.restangularFields, ['route', 'singleOne', 'parentResource'])),\n              config.extraFields\n            );\n            var parentResource = _.pick(parent, restangularFieldsForParent);\n\n            if (config.isValidId(parentId)) {\n              config.setIdToElem(parentResource, parentId, route);\n            }\n            if (config.isValidId(parentUrl)) {\n              config.setUrlToElem(parentResource, parentUrl, route);\n            }\n\n            elem[config.restangularFields.parentResource] = parentResource;\n          } else {\n            elem[config.restangularFields.parentResource] = null;\n          }\n          return elem;\n        }\n\n        function one(parent, route, id, singleOne) {\n          var error;\n          if (_.isNumber(route) || _.isNumber(parent)) {\n            error = 'You\\'re creating a Restangular entity with the number ';\n            error += 'instead of the route or the parent. For example, you can\\'t call .one(12).';\n            throw new Error(error);\n          }\n          if (_.isUndefined(route)) {\n            error = 'You\\'re creating a Restangular entity either without the path. ';\n            error += 'For example you can\\'t call .one(). Please check if your arguments are valid.';\n            throw new Error(error);\n          }\n          var elem = {};\n          config.setIdToElem(elem, id, route);\n          config.setFieldToElem(config.restangularFields.singleOne, elem, singleOne);\n          return restangularizeElem(parent, elem, route, false);\n        }\n\n\n        function all(parent, route) {\n          return restangularizeCollection(parent, [], route, false);\n        }\n\n        function several(parent, route /*, ids */ ) {\n          var collection = [];\n          collection[config.restangularFields.ids] = Array.prototype.splice.call(arguments, 2);\n          return restangularizeCollection(parent, collection, route, false);\n        }\n\n        function oneUrl(parent, route, url) {\n          if (!route) {\n            throw new Error('Route is mandatory when creating new Restangular objects.');\n          }\n          var elem = {};\n          config.setUrlToElem(elem, url, route);\n          return restangularizeElem(parent, elem, route, false);\n        }\n\n\n        function allUrl(parent, route, url) {\n          if (!route) {\n            throw new Error('Route is mandatory when creating new Restangular objects.');\n          }\n          var elem = {};\n          config.setUrlToElem(elem, url, route);\n          return restangularizeCollection(parent, elem, route, false);\n        }\n        // Promises\n        function restangularizePromise(promise, isCollection, valueToFill) {\n          promise.call = _.bind(promiseCall, promise);\n          promise.get = _.bind(promiseGet, promise);\n          promise[config.restangularFields.restangularCollection] = isCollection;\n          if (isCollection) {\n            promise.push = _.bind(promiseCall, promise, 'push');\n          }\n          promise.$object = valueToFill;\n          if (config.restangularizePromiseInterceptor) {\n            config.restangularizePromiseInterceptor(promise);\n          }\n          return promise;\n        }\n\n        function promiseCall(method) {\n          var deferred = $q.defer();\n          var callArgs = arguments;\n          var filledValue = {};\n          this.then(function(val) {\n            var params = Array.prototype.slice.call(callArgs, 1);\n            var func = val[method];\n            func.apply(val, params);\n            filledValue = val;\n            deferred.resolve(val);\n          });\n          return restangularizePromise(deferred.promise, this[config.restangularFields.restangularCollection], filledValue);\n        }\n\n        function promiseGet(what) {\n          var deferred = $q.defer();\n          var filledValue = {};\n          this.then(function(val) {\n            filledValue = val[what];\n            deferred.resolve(filledValue);\n          });\n          return restangularizePromise(deferred.promise, this[config.restangularFields.restangularCollection], filledValue);\n        }\n\n        function resolvePromise(deferred, response, data, filledValue) {\n          _.extend(filledValue, data);\n\n          // Trigger the full response interceptor.\n          if (config.fullResponse) {\n            return deferred.resolve(_.extend(response, {\n              data: data\n            }));\n          } else {\n            deferred.resolve(data);\n          }\n        }\n\n\n        // Elements\n        function stripRestangular(elem) {\n          if (_.isArray(elem)) {\n            var array = [];\n            _.each(elem, function(value) {\n              array.push(config.isRestangularized(value) ? stripRestangular(value) : value);\n            });\n            return array;\n          } else {\n            return _.omit(elem, _.values(_.omit(config.restangularFields, 'id')));\n          }\n        }\n\n        function addCustomOperation(elem) {\n          elem[config.restangularFields.customOperation] = _.bind(customFunction, elem);\n          var requestMethods = {\n            get: customFunction,\n            delete: customFunction\n          };\n          _.each(['put', 'patch', 'post'], function(name) {\n            requestMethods[name] = function(operation, elem, path, params, headers) {\n              return _.bind(customFunction, this)(operation, path, params, headers, elem);\n            };\n          });\n          _.each(requestMethods, function(requestFunc, name) {\n            var callOperation = name === 'delete' ? 'remove' : name;\n            _.each(['do', 'custom'], function(alias) {\n              elem[alias + name.toUpperCase()] = _.bind(requestFunc, elem, callOperation);\n            });\n          });\n          elem[config.restangularFields.customGETLIST] = _.bind(fetchFunction, elem);\n          elem[config.restangularFields.doGETLIST] = elem[config.restangularFields.customGETLIST];\n        }\n\n        function copyRestangularizedElement(element) {\n          var copiedElement = angular.copy(element);\n\n          // check if we're dealing with a collection (i.e. an array)\n          // and restangularize the element using the proper restangularizer,\n          // element / collection\n          if (_.isArray(element)) {\n            return restangularizeCollection(\n              element[config.restangularFields.parentResource],\n              copiedElement,\n              element[config.restangularFields.route],\n              element[config.restangularFields.fromServer],\n              element[config.restangularFields.reqParams]\n            );\n          }\n\n          // not a collection, restangularize it as an element\n          return restangularizeElem(\n            element[config.restangularFields.parentResource],\n            copiedElement,\n            element[config.restangularFields.route],\n            element[config.restangularFields.fromServer],\n            element[config.restangularFields.restangularCollection],\n            element[config.restangularFields.reqParams]\n          );\n        }\n\n        function restangularizeElem(parent, element, route, fromServer, collection, reqParams) {\n          var elem = config.onBeforeElemRestangularized(element, false, route);\n\n          var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n\n          if (config.useCannonicalId) {\n            localElem[config.restangularFields.cannonicalId] = config.getIdFromElem(localElem);\n          }\n\n          if (collection) {\n            localElem[config.restangularFields.getParentList] = function() {\n              return collection;\n            };\n          }\n\n          localElem[config.restangularFields.restangularCollection] = false;\n          localElem[config.restangularFields.get] = _.bind(getFunction, localElem);\n          localElem[config.restangularFields.getList] = _.bind(fetchFunction, localElem);\n          localElem[config.restangularFields.put] = _.bind(putFunction, localElem);\n          localElem[config.restangularFields.post] = _.bind(postFunction, localElem);\n          localElem[config.restangularFields.remove] = _.bind(deleteFunction, localElem);\n          localElem[config.restangularFields.head] = _.bind(headFunction, localElem);\n          localElem[config.restangularFields.trace] = _.bind(traceFunction, localElem);\n          localElem[config.restangularFields.options] = _.bind(optionsFunction, localElem);\n          localElem[config.restangularFields.patch] = _.bind(patchFunction, localElem);\n          localElem[config.restangularFields.save] = _.bind(save, localElem);\n\n          addCustomOperation(localElem);\n          return config.transformElem(localElem, false, route, service, true);\n        }\n\n        function restangularizeCollection(parent, element, route, fromServer, reqParams) {\n          var elem = config.onBeforeElemRestangularized(element, true, route);\n\n          var localElem = restangularizeBase(parent, elem, route, reqParams, fromServer);\n          localElem[config.restangularFields.restangularCollection] = true;\n          localElem[config.restangularFields.post] = _.bind(postFunction, localElem, null);\n          localElem[config.restangularFields.remove] = _.bind(deleteFunction, localElem);\n          localElem[config.restangularFields.head] = _.bind(headFunction, localElem);\n          localElem[config.restangularFields.trace] = _.bind(traceFunction, localElem);\n          localElem[config.restangularFields.putElement] = _.bind(putElementFunction, localElem);\n          localElem[config.restangularFields.options] = _.bind(optionsFunction, localElem);\n          localElem[config.restangularFields.patch] = _.bind(patchFunction, localElem);\n          localElem[config.restangularFields.get] = _.bind(getById, localElem);\n          localElem[config.restangularFields.getList] = _.bind(fetchFunction, localElem, null);\n\n          addCustomOperation(localElem);\n          return config.transformElem(localElem, true, route, service, true);\n        }\n\n        function restangularizeCollectionAndElements(parent, element, route, fromServer) {\n          var collection = restangularizeCollection(parent, element, route, fromServer);\n          _.each(collection, function(elem) {\n            if (elem) {\n              restangularizeElem(parent, elem, route, fromServer);\n            }\n          });\n          return collection;\n        }\n\n        function getById(id, reqParams, headers) {\n          return this.customGET(id.toString(), reqParams, headers);\n        }\n\n        function putElementFunction(idx, params, headers) {\n          var __this = this;\n          var elemToPut = this[idx];\n          var deferred = $q.defer();\n          var filledArray = [];\n          filledArray = config.transformElem(filledArray, true, elemToPut[config.restangularFields.route], service);\n          elemToPut.put(params, headers).then(function(serverElem) {\n            var newArray = copyRestangularizedElement(__this);\n            newArray[idx] = serverElem;\n            filledArray = newArray;\n            deferred.resolve(newArray);\n          }, function(response) {\n            deferred.reject(response);\n          });\n\n          return restangularizePromise(deferred.promise, true, filledArray);\n        }\n\n        function parseResponse(resData, operation, route, fetchUrl, response, deferred) {\n          var data = config.responseExtractor(resData, operation, route, fetchUrl, response, deferred);\n          var etag = response.headers('ETag');\n          if (data && etag) {\n            data[config.restangularFields.etag] = etag;\n          }\n          return data;\n        }\n\n\n        function fetchFunction(what, reqParams, headers) {\n          var __this = this;\n          var deferred = $q.defer();\n          var operation = 'getList';\n          var url = urlHandler.fetchUrl(this, what);\n          var whatFetched = what || __this[config.restangularFields.route];\n\n          var request = config.fullRequestInterceptor(null, operation,\n            whatFetched, url, headers || {}, reqParams || {}, this[config.restangularFields.httpConfig] || {});\n\n          var filledArray = [];\n          filledArray = config.transformElem(filledArray, true, whatFetched, service);\n\n          var method = 'getList';\n\n          if (config.jsonp) {\n            method = 'jsonp';\n          }\n\n          var okCallback = function(response) {\n            var resData = response.data;\n            var fullParams = response.config.params;\n            var data = parseResponse(resData, operation, whatFetched, url, response, deferred);\n\n            // support empty response for getList() calls (some APIs respond with 204 and empty body)\n            if (_.isUndefined(data) || '' === data) {\n              data = [];\n            }\n            if (!_.isArray(data)) {\n              throw new Error('Response for getList SHOULD be an array and not an object or something else');\n            }\n\n            if (true === config.plainByDefault) {\n              return resolvePromise(deferred, response, data, filledArray);\n            }\n\n            var processedData = _.map(data, function(elem) {\n              if (!__this[config.restangularFields.restangularCollection]) {\n                return restangularizeElem(__this, elem, what, true, data);\n              } else {\n                return restangularizeElem(__this[config.restangularFields.parentResource],\n                  elem, __this[config.restangularFields.route], true, data);\n              }\n            });\n\n            processedData = _.extend(data, processedData);\n\n            if (!__this[config.restangularFields.restangularCollection]) {\n              resolvePromise(\n                deferred,\n                response,\n                restangularizeCollection(\n                  __this,\n                  processedData,\n                  what,\n                  true,\n                  fullParams\n                ),\n                filledArray\n              );\n            } else {\n              resolvePromise(\n                deferred,\n                response,\n                restangularizeCollection(\n                  __this[config.restangularFields.parentResource],\n                  processedData,\n                  __this[config.restangularFields.route],\n                  true,\n                  fullParams\n                ),\n                filledArray\n              );\n            }\n          };\n\n          urlHandler.resource(this, $http, request.httpConfig, request.headers, request.params, what,\n            this[config.restangularFields.etag], operation)[method]().then(okCallback, function error(response) {\n            if (response.status === 304 && __this[config.restangularFields.restangularCollection]) {\n              resolvePromise(deferred, response, __this, filledArray);\n            } else if (_.every(config.errorInterceptors, function(cb) {\n                return cb(response, deferred, okCallback) !== false;\n              })) {\n              // triggered if no callback returns false\n              deferred.reject(response);\n            }\n          });\n\n          return restangularizePromise(deferred.promise, true, filledArray);\n        }\n\n        function withHttpConfig(httpConfig) {\n          this[config.restangularFields.httpConfig] = httpConfig;\n          return this;\n        }\n\n        function save(params, headers) {\n          if (this[config.restangularFields.fromServer]) {\n            return this[config.restangularFields.put](params, headers);\n          } else {\n            return _.bind(elemFunction, this)('post', undefined, params, undefined, headers);\n          }\n        }\n\n        function elemFunction(operation, what, params, obj, headers) {\n          var __this = this;\n          var deferred = $q.defer();\n          var resParams = params || {};\n          var route = what || this[config.restangularFields.route];\n          var fetchUrl = urlHandler.fetchUrl(this, what);\n\n          var callObj = obj || this;\n          // fallback to etag on restangular object (since for custom methods we probably don't explicitly specify the etag field)\n          var etag = callObj[config.restangularFields.etag] || (operation !== 'post' ? this[config.restangularFields.etag] : null);\n\n          if (_.isObject(callObj) && config.isRestangularized(callObj)) {\n            callObj = stripRestangular(callObj);\n          }\n          var request = config.fullRequestInterceptor(callObj, operation, route, fetchUrl,\n            headers || {}, resParams || {}, this[config.restangularFields.httpConfig] || {});\n\n          var filledObject = {};\n          filledObject = config.transformElem(filledObject, false, route, service);\n\n          var okCallback = function(response) {\n            var resData = response.data;\n            var fullParams = response.config.params;\n            var elem = parseResponse(resData, operation, route, fetchUrl, response, deferred);\n\n            // accept 0 as response\n            if (elem !== null && elem !== undefined && elem !== '') {\n              var data;\n\n              if (true === config.plainByDefault) {\n                return resolvePromise(deferred, response, elem, filledObject);\n              }\n\n              if (operation === 'post' && !__this[config.restangularFields.restangularCollection]) {\n                data = restangularizeElem(\n                  __this[config.restangularFields.parentResource],\n                  elem,\n                  route,\n                  true,\n                  null,\n                  fullParams\n                );\n                resolvePromise(deferred, response, data, filledObject);\n              } else {\n                data = restangularizeElem(\n                  __this[config.restangularFields.parentResource],\n                  elem,\n                  __this[config.restangularFields.route],\n                  true,\n                  null,\n                  fullParams\n                );\n\n                data[config.restangularFields.singleOne] = __this[config.restangularFields.singleOne];\n                resolvePromise(deferred, response, data, filledObject);\n              }\n\n            } else {\n              resolvePromise(deferred, response, undefined, filledObject);\n            }\n          };\n\n          var errorCallback = function(response) {\n            if (response.status === 304 && config.isSafe(operation)) {\n              resolvePromise(deferred, response, __this, filledObject);\n            } else if (_.every(config.errorInterceptors, function(cb) {\n                return cb(response, deferred, okCallback) !== false;\n              })) {\n              // triggered if no callback returns false\n              deferred.reject(response);\n            }\n          };\n          // Overriding HTTP Method\n          var callOperation = operation;\n          var callHeaders = _.extend({}, request.headers);\n          var isOverrideOperation = config.isOverridenMethod(operation);\n          if (isOverrideOperation) {\n            callOperation = 'post';\n            callHeaders = _.extend(callHeaders, {\n              'X-HTTP-Method-Override': operation === 'remove' ? 'DELETE' : operation.toUpperCase()\n            });\n          } else if (config.jsonp && callOperation === 'get') {\n            callOperation = 'jsonp';\n          }\n\n          if (config.isSafe(operation)) {\n            if (isOverrideOperation) {\n              urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n                what, etag, callOperation)[callOperation]({}).then(okCallback, errorCallback);\n            } else {\n              urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n                what, etag, callOperation)[callOperation]().then(okCallback, errorCallback);\n            }\n          } else {\n            urlHandler.resource(this, $http, request.httpConfig, callHeaders, request.params,\n              what, etag, callOperation)[callOperation](request.element).then(okCallback, errorCallback);\n          }\n\n          return restangularizePromise(deferred.promise, false, filledObject);\n        }\n\n        function getFunction(params, headers) {\n          return _.bind(elemFunction, this)('get', undefined, params, undefined, headers);\n        }\n\n        function deleteFunction(params, headers) {\n          return _.bind(elemFunction, this)('remove', undefined, params, undefined, headers);\n        }\n\n        function putFunction(params, headers) {\n          return _.bind(elemFunction, this)('put', undefined, params, undefined, headers);\n        }\n\n        function postFunction(what, elem, params, headers) {\n          return _.bind(elemFunction, this)('post', what, params, elem, headers);\n        }\n\n        function headFunction(params, headers) {\n          return _.bind(elemFunction, this)('head', undefined, params, undefined, headers);\n        }\n\n        function traceFunction(params, headers) {\n          return _.bind(elemFunction, this)('trace', undefined, params, undefined, headers);\n        }\n\n        function optionsFunction(params, headers) {\n          return _.bind(elemFunction, this)('options', undefined, params, undefined, headers);\n        }\n\n        function patchFunction(elem, params, headers) {\n          return _.bind(elemFunction, this)('patch', undefined, params, elem, headers);\n        }\n\n        function customFunction(operation, path, params, headers, elem) {\n          return _.bind(elemFunction, this)(operation, path, params, elem, headers);\n        }\n\n        function addRestangularMethodFunction(name, operation, path, defaultParams, defaultHeaders, defaultElem) {\n          var bindedFunction;\n          if (operation === 'getList') {\n            bindedFunction = _.bind(fetchFunction, this, path);\n          } else {\n            bindedFunction = _.bind(customFunction, this, operation, path);\n          }\n\n          var createdFunction = function(params, headers, elem) {\n            var callParams = _.defaults({\n              params: params,\n              headers: headers,\n              elem: elem\n            }, {\n              params: defaultParams,\n              headers: defaultHeaders,\n              elem: defaultElem\n            });\n            return bindedFunction(callParams.params, callParams.headers, callParams.elem);\n          };\n\n          if (config.isSafe(operation)) {\n            this[name] = createdFunction;\n          } else {\n            this[name] = function(elem, params, headers) {\n              return createdFunction(params, headers, elem);\n            };\n          }\n        }\n\n        function withConfigurationFunction(configurer) {\n          var newConfig = angular.copy(_.omit(config, 'configuration'));\n          Configurer.init(newConfig, newConfig);\n          configurer(newConfig);\n          return createServiceForConfiguration(newConfig);\n        }\n\n        function toService(route, parent) {\n          var knownCollectionMethods = _.values(config.restangularFields);\n          var serv = {};\n          var collection = (parent || service).all(route);\n          serv.one = _.bind(one, (parent || service), parent, route);\n          serv.post = _.bind(collection.post, collection);\n          serv.getList = _.bind(collection.getList, collection);\n          serv.withHttpConfig = _.bind(collection.withHttpConfig, collection);\n          serv.get = _.bind(collection.get, collection);\n\n          for (var prop in collection) {\n            if (collection.hasOwnProperty(prop) && _.isFunction(collection[prop]) && !_.includes(knownCollectionMethods, prop)) {\n              serv[prop] = _.bind(collection[prop], collection);\n            }\n          }\n\n          return serv;\n        }\n\n\n        Configurer.init(service, config);\n\n        service.copy = _.bind(copyRestangularizedElement, service);\n\n        service.service = _.bind(toService, service);\n\n        service.withConfig = _.bind(withConfigurationFunction, service);\n\n        service.one = _.bind(one, service, null);\n\n        service.all = _.bind(all, service, null);\n\n        service.several = _.bind(several, service, null);\n\n        service.oneUrl = _.bind(oneUrl, service, null);\n\n        service.allUrl = _.bind(allUrl, service, null);\n\n        service.stripRestangular = _.bind(stripRestangular, service);\n\n        service.restangularizeElement = _.bind(restangularizeElem, service);\n\n        service.restangularizeCollection = _.bind(restangularizeCollectionAndElements, service);\n\n        return service;\n      }\n\n      return createServiceForConfiguration(globalConfiguration);\n    }];\n  });\n  return restangular.name;\n}));\n"}